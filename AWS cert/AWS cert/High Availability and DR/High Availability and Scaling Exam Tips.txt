Hello, Cloud Gurus and welcome back.
In this lesson, we're going to take a look
at some of our exam tips
for the high availability and scaling lessons.
So let's go ahead and dive right on in.
We're going to go over 4 important questions
that I want you to ask yourself in the exam
anytime you see a question that seems to relate
to scaling and high availability.
Now the first one here is, is it highly available? We
always want to pick answers that include high availability.
Even if the question isn't specifically asking,
is this solution highly available?
We still want to gear ourselves
towards picking answers that are highly available.
Unless you are presented with a situation
that explicitly calls out
that you do not need high availability
and it is only focusing on cost,
we always want to make sure
that our resources can withstand failure
and are spread out across those multiple available zones.
Whenever we're presented with a situation
that involves scaling, we have to ask ourselves,
should this be horizontal or vertically scaled?
And now, as we talked about in those previous lessons
we generally want to focus on horizontal scaling
because we can continue to spin up more resources,
more architecture, it helps us be more highly available.
Where vertical scaling,
just resizing that instance has that natural limit.
Now that doesn't mean
that we never want to vertically scale on the exam.
You might see a situation which says,
we want to increase that network throughput
for that t2.micro instance.
The only real answer there is you need to scale vertically.
You need to upsize that
to be something that's a bit more appropriate.
So we want to generally favor horizontal
but that doesn't mean
we always want to write off vertical scaling.
Is the scaling solution cost effective?
Even if the question is not specifically asking
for a cost effective solution, we want to keep cost in mind.
You might be seeing a question that says,
how do we scale out this architecture?
And one of the answers is we need to spin up that fleet
of X1 32XL instances.
And sure, would that technically solve the problem?
Yeah, but that's going to cost a lot more money than it
should. So we always want to balance in
how much does the solution cost
and does it meet the situation
that we're being provided with?
Could we switch the database to fix our problem?
I know what you're thinking.
If you've worked in IT before,
switching databases is a very complex task.
There's no magic button that I can just press
to move from a relational database to a NoSQL database.
However, on the exam in the wonderful world of AWS questions
we can easily flip between them with no real work.
So when you're looking at a situation,
if it says, perhaps we have that relational database
that's just falling over and we're spending too much money
and we need something that's a little bit more flexible,
we might want to think, hey,
would that DynamoDB option work for us?
That non-relational database?
We can select an answer that does that migration,
even though actually doing that migration
would be a huge burden on our team.
Now that we've got those 4 questions in mind
let's go through some specific tips relating to auto scaling
that can hopefully help us out on the exam.
Our first point to keep in mind is,
auto scaling is only for EC2 instances.
So no other service can be added into an auto scaling group.
It cannot be used to add in load balancers,
or RDS databases, or Lambda functions, or anything else.
Now, some of those services that I mentioned
do have the ability to scale,
but that is separate and independent
from those EC2 auto scaling groups.
And this is a common pitfall
that I've seen a lot of folks, well, stumble their way into.
You might be present with a scenario that says,
we'll scale the RDS database by using an auto scaling group.
And that's just not possible.
Whenever we can, we want to select answers
that get ahead of the workload.
If you're given a situation that says, hey,
we have a predictable consistent workload
at 5:00 PM every single day.
You wouldn't want to pick an answer
that says we're spinning up instances
after that workload has started.
If it makes it seem like there is a consistent pattern
to what's going on, we need to get ahead of that.
This is where you're going to want to pick an answer that
says, maybe we're spinning up those instances at 4:45
to get ahead of that 5 o'clock rush.
It's better to be ahead rather than playing catch up.
You're often presented with scenarios
that talk about how do we better fine tune or tweak
our auto scaling groups.
And one of the problems that you might run into on the exam
is that your instances are taking just too long
to come online.
You have a really long provisioning time
and that's causing an issue
when you need those instances to respond to a workload
that has just hit your architecture.
So whenever we can,
we want to bake everything inside of that AMI.
By baking those AMIs,
by loading it up with our dependencies and our code,
they're going to provision a lot quicker
than trying to do it using that user data
or another solution.
We want to focus on picking answers
that include that short provisioning time whenever possible.
Let's take a look at a few more important tips here.
We want to ensure that we are spreading out.
You are never going to pick a right answer on the exam
that includes one single available zone.
We always want to spread out our content
over at least 2 availability zones,
because you can't really make a highly available solution
in a single availability zone.
So ensure that your auto scaling groups,
and in general, the rest of your architecture
is spread out across most multiple AZs.
That gives us the ability for that one AZ to fail,
the architecture to have problems,
and for us to have that backup.
Now, in that previous lesson
we took a look at that steady state group.
Remember, it's that auto scaling group
that has that min, max, and desired capacity of 1.
This is great for that situation
where maybe we have that legacy instance, that NAT instance,
that resource where there can't be more than one at a time.
We saw this during that demo
where if that instance fails,
auto scaling will automatically recover that architecture.
Keep this in mind
if you're asked about creating a highly available solution
for that legacy resource
where we can't have more than one online at once.
While we just talked about
that your load balancers cannot be included
inside of your auto scaling groups for scaling purposes,
they are best friends with your auto scaling group
when it comes to distributing traffic
to the those instances,
and also determining if an instance
has failed that health check and needs to be replaced.
Now, this doesn't happen by default.
So ensure that you are picking answers
that include a load balancer to distribute the traffic
and that you've checked that check box to make sure
that any unhealthy instances in the load balancer
are terminated by the auto scaling group.
Remember, that is not default behavior.
And therefore, we have to make sure
that it is explicitly called out
in the answers that we are choosing.
All right, that's a bit about auto scaling.
Let's take a quick look
at a few points that we need to remember
when it comes time to scale those databases.
Now, a lot of the scaling questions
that you're going to run into have to do with RDS,
because RDS has the most amount of database scaling options
available to us.
Now, we talked about those in our RDS scaling lesson
but let's do a quick recap here.
Remember, we have the ability to scale vertically,
which sometimes is needed.
Remember that EC2 instance? It's a t2.micro.
We're probably going to need something
that's a little bit bigger.
We have the ability to scale out with additional storage
if we're running out of storage in that database.
And we also have the ability to do horizontal scaling.
Now I know what you're thinking, horizontal scaling,
how do we do that with a relational database?
What we really do that through the use
of those read replicas.
And read replicas are your best friend.
If you see a question that calls out a read heavy workload
you automatically want to think read replicas.
I need to spin up read replicas,
adjust my code to point my reads to that read replica
away from that primary database.
So as you're going through the exam, think through,
because it's more than just horizontal scaling.
We have a variety of solutions for RDS architecture.
When it comes to DynamoDB, it's a lot simpler for us,
because AWS handles almost everything.
Now, if we want to think back to that DynamoDB lesson
that we had just a little bit ago,
we talked about the 2 types of tables
that we could create.
If we have that consistent access pattern,
where it's predictable,
where we gradually need to scale up
and then scale those reads and writes back down,
that's when we're going to want to select
the auto scaling method.
If we see a scenario given to us
that has an unpredictable workload,
where that access pattern spikes up and down
and up and down, and we can't really predict what we need,
then we want to pick that on-demand option.
So when it comes to scaling DynamoDB,
it's all about that access pattern.
All right, folks, thanks for joining me in these exam tips.
Hopefully this was helpful here for us
to summarize all of that content
that we talked about with high availability and scaling.
And I can't wait to see you in our next lesson.