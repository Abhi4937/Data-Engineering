Hello Cloud Gurus and welcome back.
In this lesson, we're gonna be taking a look
at some exam tips for those caching services
that we just finished talking about.
So let's go ahead and dive right on in.
Now, as always, we have those four questions
that we wanna ask ourselves with every question
that we see on the exam.
The first one is, can it be cached?
Is there a situation
in the application scenario in which I can cache my data?
Is there a way that I can use caching
to speed up performance of my application,
to reduce my costs,
or to even just deal with a technical problem?
Such as users seeing a stale version of my application
because of a failure.
We always want to be thinking,
can a cache benefit this architecture?
If it can, what kind of cache should we put there?
We've covered quite a few so far in the previous lessons,
and hopefully at this point you should have an understanding
of where do they sit inside of my architecture?
So if the question is asking for
how do we cache a database solution?
We shouldn't be putting Cloudfront there.
We should be thinking Redis, Memcached, DAX.
Depending on the type of database that we're going to see.
If it's talking about how do we distribute our content out
to our users faster, then we should be thinking Cloudfront
as that's the natural solution
that should be used there.
In the cache, how does the content
in your cache get updated?
Well, usually it's by setting those TTLs correctly, right?
Those time to live settings.
This is simply gonna dictate how long
will the data live in that cache,
and we need to have that approach
of not too hot, not too cold,
just right for our data.
It's important to remember with Cloudfront,
how do we get our content out of the cache, whether it's
through that purge, that expiration of our data,
or just simply letting it expire,
waiting for that TTL to pass.
Does that caching solution help with anything besides speed?
That's kind of an interesting question to think about
because normally we do associate caches equal speed,
but with things like Cloudfront, we can attach
that web application firewall to add in
that additional layer of security
at those edge locations closer to the end users.
So it helps with security
and it helps with speed.
With Global Accelerator, it helps with speed,
but it also helps deal with
that technical problem of, I have an issue
with those IP addresses being cached.
So caching is not always just for speed.
We have to think, does it add additional benefits?
Now, let's take a look at some exam tips for Cloudfront
as well as Global Accelerator.
Cloudfront is the only option to add HTTPS, right?
That secure connection to a static website
that is being hosted in an S three bucket.
I have seen this as an exam question, right?
We want to add security to that static website.
It's not supported by only using S three.
We have to front that S three website
with a Cloudfront distribution,
and Cloudfront, as we recall, uses HTTPS natively, right?
That is built right in.
When given a situation
that compares one solution to the other,
if one has a cache
and the other doesn't, we wanna focus on the one
that includes a caching option.
Now, it's generally not gonna be diving in too deep
on caching solutions.
We just wanna know, okay,
is there an appropriate cache in front of the part
of the architecture where it should be?
Are we using the correct kind of cache in front
of the database, the correct kind of cache in front
of my web application?
On the exam,
it doesn't really dive too deeply into the fact
that it might cost a bit more money versus not having it
if it's not configured correctly.
It's generally considered it as a high level solution,
and it only paints those caches in a positive light.
On the exam,
if you see a scenario that's talking about IP caching,
you should immediately be thinking Global Accelerator.
As we talked about in our previous lessons,
Global Accelerator gives you those two static IP addresses.
That way, customers can cache those IP addresses,
and when the architecture behind them rotates,
such as the load balancer changing out,
or you're failing from one region to another,
it doesn't really matter for your end user,
they still hit those two Global Accelerator IP addresses
and everything's good.
Now, while Global Accelerator can help with speed
and waiting, and there's additional benefits to using it,
the example generally focus on using it to solve
that problem of IP caching.
Well, that covers getting data into our environment.
Well, let's take a look at those database caches.
What do we need to know for that exam?
On the exam,
If you see the terminology "in-memory database,"
you should be immediately thinking either Redis or DynamoDB.
Now, Redis could be a standalone database.
It could also be used as a cache where DynamoDB is going
to be used in general just as that database solution.
Now, if given the option to pick between the two,
generally favor DynamoDB, I wouldn't expect something like
that to come up too often, though.
You're not gonna be asked
to take a technical deep dive of the differences
between the two types.
But we need to know that both are in
memory database solutions and provide flexibility
as they are non-relational databases and speed.
That's where they both excel.
Now, when comparing the two versions of ElastiCache,
either Redis or Memcached, we need to know
that Redis has more features.
It can be used as that persistent data storage.
It can be used as a cache. It has the support for backups.
It's just a bit more robust.
Where Memcached at the end of the day, is just a cache.
Now, that means that you should not be using
a caching solution as the source of truth for your data.
The only caching
or slash database solution that supports backups is Redis.
Memcached and DAX do not support backups
and are not a source of truth for your data.
They are simply there to help with performance.
So you need to ensure that you are picking answers
that stores that data in a permanent data storage solution
such as RDS or DynamoDB.
Alright, folks, thanks for going
through these caching exam tips with me.
I can't wait to see you in the next video.