Special use of underscore(_):
	1. 	Single Underscore (_) in Interactive Mode (Last Expression):
		In Python's interactive interpreter (like the REPL(read, eval, print, loop)), the underscore holds the value of the last evaluated expression.
		EXAMPLE:	
		'''
		>>> 3 + 5
		8
		>>> _ * 2  # Uses the result of the last expression (8)
		16
		'''
		Here, _ stores the result of 3 + 5, so _ * 2 returns 16.
	2. Single Underscore (_) to Ignore Values
		In some cases, a variable is expected, but you want to indicate that you won't use it. Using _ is a common way to signal that the value is intentionally being ignored.
		EXAMPLE:
		Unpacking values where only some elements are needed:
			'''
			a, _, c = (1, 2, 3)
			print(a, c)  # Output: 1, 3

			'''
		Looping when the variable isn't needed:
			'''
			for _ in range(5):  # Ignore the loop variable
				print("Hello")  # Will print "Hello" 5 times
			'''
	3. Single Leading Underscore (_variable) - Convention for "Private" Variables
		A single leading underscore in front of a variable or method name is a convention indicating that it is intended for internal use only. It signals to other developers that the attribute or method should not be accessed or modified directly, even though it is technically still accessible.
		EXAMPLE:
		'''
		class MyClass:
			def __init__(self):
				self._private_variable = 42  # Internal use only
		obj = MyClass()
		print(obj._private_variable)  # Not recommended, but allowed
		'''
		This is just a naming convention and doesn't enforce actual privacy.
	4. Double Leading Underscore (__variable) - Name Mangling
		Two leading underscores in a class attribute or method name trigger name mangling. This changes the name of the attribute to include the class name, making it harder to accidentally override or access from outside the class.
		EXAMPLE:
		'''
		class MyClass:
			def __init__(self):
				self.__private_variable = 42

		obj = MyClass()
		print(obj.__private_variable)  # AttributeError
		print(obj._MyClass__private_variable)  # Access via name mangling: 42
	5. Double Leading and Trailing Underscores (__variable__) - "Dunder" Methods
		Variables or methods with double leading and trailing underscores (commonly called "dunder" methods or attributes) have a special meaning in Python. These are reserved for special methods and built-in functionality, such as __init__(), __str__(), __len__(), etc.	
	6. Single Underscore (_) in Numeric Literals:
		Python allows you to use underscores to make long numbers more readable. This is purely for readability and doesn't affect the value of the number.
		EXAMPLE:
		'''
		# Using underscores in large numbers for readability
		large_number = 1_000_000_000
		print(large_number)  # Output: 1000000000
		'''
	7.  Single Underscore (_) in Internationalization (i18n):
		The underscore is often used as an alias for functions in internationalization and localization contexts. It can mark strings for translation.
		EXAMPLE:
		'''
		# Example with gettext for translation
		import gettext
		_ = gettext.gettext
		print(_("Hello, World!"))  # This string can be translated based on locale
		'''

